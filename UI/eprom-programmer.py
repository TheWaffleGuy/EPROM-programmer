#!/usr/bin/env python3
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 1.1.0 on Sun Jan 26 23:50:32 2025
#

import wx
import wx.lib.newevent
import serial
import threading

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
SerialRxEvent, EVT_SERIALRX = wx.lib.newevent.NewEvent()
SERIALRX = wx.NewEventType()
# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle("EPROM-Programmer")

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open Buffer", "")
        self.Bind(wx.EVT_MENU, self.OnOpen, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Save Buffer", "")
        self.Bind(wx.EVT_MENU, self.OnSave, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.OnExit, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Select", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceSelect, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Read", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceRead, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Blank Check", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceBlankCheck, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Verify", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceVerify, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Program", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceProgram, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "&Device")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1)
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Open Buffer", wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Open Buffer", "")
        self.Bind(wx.EVT_TOOL, self.OnOpen, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Save Buffer", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Save Buffer", "")
        self.Bind(wx.EVT_TOOL, self.OnSave, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Blank Check", wx.ArtProvider.GetBitmap(wx.ART_QUESTION, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Blank Check Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceBlankCheck, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Verify", wx.ArtProvider.GetBitmap(wx.ART_TICK_MARK, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Verify Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceVerify, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Read", wx.ArtProvider.GetBitmap(wx.ART_GO_DOWN, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Read Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceRead, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Program", wx.ArtProvider.GetBitmap(wx.ART_GO_UP, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Program Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceProgram, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Select Device", wx.ArtProvider.GetBitmap(wx.ART_FIND, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Select Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceSelect, id=tool.GetId())
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.Realize()
        # Tool Bar end
        person_label = wx.StaticText(self.frame_toolbar, -1, "Selected Device:",
                                     wx.Point (0, 0)) 
        person_combo = wx.ComboBox(self.frame_toolbar, wx.ID_ANY)
        self.frame_toolbar.AddControl(person_label)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_1.Add((10, 0), 0, 0, 0)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        sizer_2.Add((0, 10), 0, 0, 0)

        buffer_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(buffer_sizer, 3, wx.EXPAND, 0)

        self.buffer_grid = wx.grid.Grid(self, wx.ID_ANY)
        self.buffer_grid.CreateGrid(20, 18)
        self.buffer_grid.SetDefaultCellFont(wx.Font(12, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.buffer_grid.EnableEditing(0)
        self.buffer_grid.EnableDragColSize(0)
        self.buffer_grid.EnableDragRowSize(0)
        self.buffer_grid.SetColLabelValue(0, "Address")
        self.buffer_grid.SetColSize(0, 80)
        self.buffer_grid.SetColLabelValue(1, "0")
        self.buffer_grid.SetColSize(1, 26)
        self.buffer_grid.SetColLabelValue(2, "1")
        self.buffer_grid.SetColSize(2, 26)
        self.buffer_grid.SetColLabelValue(3, "2")
        self.buffer_grid.SetColSize(3, 26)
        self.buffer_grid.SetColLabelValue(4, "3")
        self.buffer_grid.SetColSize(4, 26)
        self.buffer_grid.SetColLabelValue(5, "4")
        self.buffer_grid.SetColSize(5, 26)
        self.buffer_grid.SetColLabelValue(6, "5")
        self.buffer_grid.SetColSize(6, 26)
        self.buffer_grid.SetColLabelValue(7, "6")
        self.buffer_grid.SetColSize(7, 26)
        self.buffer_grid.SetColLabelValue(8, "7")
        self.buffer_grid.SetColSize(8, 26)
        self.buffer_grid.SetColLabelValue(9, "8")
        self.buffer_grid.SetColSize(9, 26)
        self.buffer_grid.SetColLabelValue(10, "9")
        self.buffer_grid.SetColSize(10, 26)
        self.buffer_grid.SetColLabelValue(11, "A")
        self.buffer_grid.SetColSize(11, 26)
        self.buffer_grid.SetColLabelValue(12, "B")
        self.buffer_grid.SetColSize(12, 26)
        self.buffer_grid.SetColLabelValue(13, "C")
        self.buffer_grid.SetColSize(13, 26)
        self.buffer_grid.SetColLabelValue(14, "D")
        self.buffer_grid.SetColSize(14, 26)
        self.buffer_grid.SetColLabelValue(15, "E")
        self.buffer_grid.SetColSize(15, 26)
        self.buffer_grid.SetColLabelValue(16, "F")
        self.buffer_grid.SetColSize(16, 26)
        self.buffer_grid.SetColLabelValue(17, "ASCII")
        self.buffer_grid.SetColSize(17, 166)
        self.buffer_grid.SetMinSize((661, -1))
        self.buffer_grid.HideRowLabels()
        self.buffer_grid.ShowScrollbars(wx.SHOW_SB_NEVER, wx.SHOW_SB_DEFAULT)
        self.buffer_grid.SetMaxSize((661, -1))
        buffer_sizer.Add(self.buffer_grid, 1, wx.EXPAND, 0)

        buffer_sizer.Add((20, 0), 0, 0, 0)

        self.debug_text_ctrl = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.debug_text_ctrl.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        buffer_sizer.Add(self.debug_text_ctrl, 1, wx.EXPAND, 0)

        sizer_2.Add((0, 20), 0, 0, 0)

        options_sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Program Options"), wx.VERTICAL)
        sizer_2.Add(options_sizer, 0, wx.EXPAND, 0)

        checkbox_sizer = wx.BoxSizer(wx.HORIZONTAL)
        options_sizer.Add(checkbox_sizer, 0, wx.EXPAND, 0)

        self.verify_checkbox_copy = wx.CheckBox(self, wx.ID_ANY, "Verify")
        self.verify_checkbox_copy.SetValue(1)
        checkbox_sizer.Add(self.verify_checkbox_copy, 0, wx.ALL | wx.EXPAND, 4)

        self.blank_check_checkbox_copy = wx.CheckBox(self, wx.ID_ANY, "Blank Check")
        self.blank_check_checkbox_copy.SetValue(1)
        checkbox_sizer.Add(self.blank_check_checkbox_copy, 0, wx.ALL | wx.EXPAND, 4)

        vcc_sizer = wx.BoxSizer(wx.HORIZONTAL)
        options_sizer.Add(vcc_sizer, 0, wx.EXPAND, 0)

        vcc_label = wx.StaticText(self, wx.ID_ANY, "Verify/Blank Check voltage:", style=wx.ALIGN_CENTER_HORIZONTAL)
        vcc_sizer.Add(vcc_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.vcc_radio_btn = wx.RadioButton(self, wx.ID_ANY, "VCC")
        vcc_sizer.Add(self.vcc_radio_btn, 0, wx.ALL, 4)

        self.vcc_5_radio_btn = wx.RadioButton(self, wx.ID_ANY, "VCC +/-5%")
        vcc_sizer.Add(self.vcc_5_radio_btn, 0, wx.ALL, 4)

        self.vcc_10_radio_btn = wx.RadioButton(self, wx.ID_ANY, "VCC +/-10%")
        vcc_sizer.Add(self.vcc_10_radio_btn, 0, wx.ALL, 4)

        sizer_2.Add((0, 10), 0, 0, 0)

        sizer_1.Add((10, 0), 0, 0, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()
        self.Bind(EVT_SERIALRX, self.OnSerialRx)

        self.debug_text_ctrl.Bind(wx.EVT_CHAR_HOOK, self.OnDebugText)
        self.Bind(wx.EVT_CLOSE, self.OnExit)
        # end wxGlade


        self.serial = serial.Serial('/dev/ttyACM0', 38400, timeout=1)
        self.thread = None
        self.alive = threading.Event()
        self.StartRxThread()

    def OnOpen(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnOpen' not implemented!")
        event.Skip()

    def OnSave(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnSave' not implemented!")
        event.Skip()

    def OnExit(self, event):  # wxGlade: MainFrame.<event_handler>
        self.StopRxThread()
        self.serial.close()
        self.Destroy()

    def OnDeviceSelect(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnDeviceSelect' not implemented!")
        event.Skip()

    def OnDeviceRead(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnDeviceRead' not implemented!")
        event.Skip()

    def OnDeviceBlankCheck(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnDeviceBlankCheck' not implemented!")
        event.Skip()

    def OnDeviceVerify(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnDeviceVerify' not implemented!")
        event.Skip()

    def OnDeviceProgram(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnDeviceProgram' not implemented!")
        event.Skip()

    def OnDebugText(self, event):  # wxGlade: MainFrame.<event_handler>
        code = event.GetKeyCode()
        if code == 13:
            self.serial.write(b'\n')
        else:
            char = chr(code)
            self.serial.write(char.encode('UTF-8', 'replace'))
        event.StopPropagation()

    def OnSerialRx(self, event):  # wxGlade: MainFrame.<event_handler>
        self.debug_text_ctrl.AppendText(event.data.decode('UTF-8', 'replace'))

    def ComPortRxThread(self):
        while self.alive.is_set():
            b = self.serial.read(self.serial.in_waiting or 1)
            if b:
                b = b.replace(b'\r', b'')
                wx.PostEvent(self, SerialRxEvent(data=b))

    def StartRxThread(self):
        self.thread = threading.Thread(target=self.ComPortRxThread)
        self.thread.daemon = True
        self.alive.set()
        self.thread.start()

    def StopRxThread(self):
        if self.thread is not None:
            self.alive.clear()
            self.thread.join()
            self.thread = None

# end of class MainFrame

class EpromProgrammerApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class EpromProgrammerApp

if __name__ == "__main__":
    app = EpromProgrammerApp(0)
    app.MainLoop()
