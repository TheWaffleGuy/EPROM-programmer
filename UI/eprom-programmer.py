#!/usr/bin/env python3
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 1.1.0 on Sun Jan 26 23:50:32 2025
#

import wx
import wx.lib.newevent
import serial
import threading
import queue
from tool import find_programmer, get_com_port, DeviceError
from command_processor import CommandProcessor, ReadDevice, DownloadData, ListDevices
import re

processor = CommandProcessor()

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
SerialRxEvent, EVT_SERIALRX = wx.lib.newevent.NewEvent()
SERIALRX = wx.NewEventType()
# end wxGlade

import wx.lib.mixins.listctrl as listmix

class AutoSizingListCtrl(wx.ListCtrl, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, parent, ID, pos=wx.DefaultPosition,
                 size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        listmix.ListCtrlAutoWidthMixin.__init__(self)
        self.setResizeColumn(0)


class SelectDeviceDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        wx.Dialog.__init__(self, *args, **kwds)
        # begin wxGlade: SelectDeviceDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Select a device")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_1.Add((0, 10), 0, 0, 0)

        filter_devices_sizer = wx.WrapSizer(wx.HORIZONTAL)
        sizer_1.Add(filter_devices_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        filter_devices_label = wx.StaticText(self, wx.ID_ANY, "Filter Devices")
        filter_devices_sizer.Add(filter_devices_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.filter_devices_text_ctrl = wx.TextCtrl(self, wx.ID_ANY, "")
        self.filter_devices_text_ctrl.SetMinSize((200, -1))
        filter_devices_sizer.Add(self.filter_devices_text_ctrl, 0, 0, 0)

        sizer_1.Add((0, 10), 0, 0, 0)

        device_list_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(device_list_sizer, 1, wx.EXPAND, 0)

        device_list_sizer.Add((10, 0), 0, 0, 0)

        self.device_list_ctrl = AutoSizingListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_NO_HEADER | wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.LC_VRULES)
        self.device_list_ctrl.InsertColumn(0, "Device", format=wx.LIST_FORMAT_LEFT, width=-1)
        device_list_sizer.Add(self.device_list_ctrl, 1, 0, 0)

        device_list_sizer.Add((10, 0), 0, 0, 0)

        select_device_button_sizer = wx.StdDialogButtonSizer()
        sizer_1.Add(select_device_button_sizer, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.Enable(False)
        self.button_OK.SetDefault()
        select_device_button_sizer.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        select_device_button_sizer.AddButton(self.button_CANCEL)

        select_device_button_sizer.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.filter_devices_text_ctrl.Bind(wx.EVT_TEXT, self.OnFilter)
        self.device_list_ctrl.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.onListItemSelect)
        self.device_list_ctrl.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.onListItemFocused)
        # end wxGlade

        self.items = []

    def OnAddRow(self, text):
        self.items.append(text)
        self.device_list_ctrl.InsertItem(self.device_list_ctrl.GetItemCount(), text)

    def onListItemSelect(self, event):  # wxGlade: SelectDeviceDialog.<event_handler>
        self.EndModal(wx.ID_OK)

    def GetSelectedDevice(self):
        selected_index = self.device_list_ctrl.GetFirstSelected()
        if selected_index != -1:
            return self.device_list_ctrl.GetItemText(selected_index)

    def OnFilter(self, event):  # wxGlade: SelectDeviceDialog.<event_handler>
        filter_text = self.filter_devices_text_ctrl.GetValue().lower()
        self.device_list_ctrl.DeleteAllItems()
        for item in self.items:
            if filter_text in item.lower():
                self.device_list_ctrl.InsertItem(self.device_list_ctrl.GetItemCount(), item)
        self.button_OK.Enable(False)

    def onListItemFocused(self, event):  # wxGlade: SelectDeviceDialog.<event_handler>
        self.button_OK.Enable(True)


# end of class SelectDeviceDialog
class ErrorFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        error_message_str = kwds["error_message"]
        del kwds["error_message"]

        # begin wxGlade: ErrorFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Error")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        error_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(error_sizer, 0, wx.ALL | wx.EXPAND, 4)

        error_image = wx.StaticBitmap(self, wx.ID_ANY, wx.ArtProvider.GetBitmap(wx.ART_ERROR, wx.ART_MESSAGE_BOX, (36, 36)))
        error_sizer.Add(error_image, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        error_message = wx.StaticText(self, wx.ID_ANY, "")
        error_message.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        error_message.SetLabel(error_message_str)
        error_sizer.Add(error_message, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        button_sizer = wx.StdDialogButtonSizer()
        sizer_1.Add(button_sizer, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        button_sizer.AddButton(self.button_OK)

        button_sizer.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())

        self.Layout()
        # end wxGlade

# end of class ErrorFrame
class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle("EPROM-Programmer")

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open Buffer", "")
        self.Bind(wx.EVT_MENU, self.OnOpen, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Save Buffer", "")
        self.Bind(wx.EVT_MENU, self.OnSave, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.OnExit, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Select", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceSelect, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Read", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceRead, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Blank Check", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceBlankCheck, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Verify", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceVerify, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Program", "")
        self.Bind(wx.EVT_MENU, self.OnDeviceProgram, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "&Device")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1)
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Open Buffer", wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Open Buffer", "")
        self.Bind(wx.EVT_TOOL, self.OnOpen, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Save Buffer", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Save Buffer", "")
        self.Bind(wx.EVT_TOOL, self.OnSave, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Blank Check", wx.ArtProvider.GetBitmap(wx.ART_QUESTION, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Blank Check Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceBlankCheck, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Verify", wx.ArtProvider.GetBitmap(wx.ART_TICK_MARK, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Verify Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceVerify, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Read", wx.ArtProvider.GetBitmap(wx.ART_GO_DOWN, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Read Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceRead, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Program", wx.ArtProvider.GetBitmap(wx.ART_GO_UP, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Program Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceProgram, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Select Device", wx.ArtProvider.GetBitmap(wx.ART_FIND, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Select Device", "")
        self.Bind(wx.EVT_TOOL, self.OnDeviceSelect, id=tool.GetId())
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.Realize()
        # Tool Bar end
        selected_device_label = wx.StaticText(self.frame_toolbar, -1, "Selected Device:",
                                     wx.Point (0, 0))
        self.frame_toolbar.AddControl(selected_device_label)
        self.selected_device = wx.StaticText(self.frame_toolbar, -1, "Selected Device:",
                                     wx.Point (0, 0))
        select_device_font = wx.Font(wx.FontInfo().Bold())
        self.selected_device.SetFont(select_device_font)
        self.frame_toolbar.AddControl(self.selected_device)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_1.Add((10, 0), 0, 0, 0)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        sizer_2.Add((0, 10), 0, 0, 0)

        buffer_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(buffer_sizer, 3, wx.EXPAND, 0)

        self.buffer_grid = wx.grid.Grid(self, wx.ID_ANY)
        self.buffer_grid.CreateGrid(20, 18)
        self.buffer_grid.SetDefaultCellFont(wx.Font(12, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.buffer_grid.EnableEditing(0)
        self.buffer_grid.EnableDragColSize(0)
        self.buffer_grid.EnableDragRowSize(0)
        self.buffer_grid.SetColLabelValue(0, "Address")
        self.buffer_grid.SetColSize(0, 80)
        self.buffer_grid.SetColLabelValue(1, "0")
        self.buffer_grid.SetColSize(1, 26)
        self.buffer_grid.SetColLabelValue(2, "1")
        self.buffer_grid.SetColSize(2, 26)
        self.buffer_grid.SetColLabelValue(3, "2")
        self.buffer_grid.SetColSize(3, 26)
        self.buffer_grid.SetColLabelValue(4, "3")
        self.buffer_grid.SetColSize(4, 26)
        self.buffer_grid.SetColLabelValue(5, "4")
        self.buffer_grid.SetColSize(5, 26)
        self.buffer_grid.SetColLabelValue(6, "5")
        self.buffer_grid.SetColSize(6, 26)
        self.buffer_grid.SetColLabelValue(7, "6")
        self.buffer_grid.SetColSize(7, 26)
        self.buffer_grid.SetColLabelValue(8, "7")
        self.buffer_grid.SetColSize(8, 26)
        self.buffer_grid.SetColLabelValue(9, "8")
        self.buffer_grid.SetColSize(9, 26)
        self.buffer_grid.SetColLabelValue(10, "9")
        self.buffer_grid.SetColSize(10, 26)
        self.buffer_grid.SetColLabelValue(11, "A")
        self.buffer_grid.SetColSize(11, 26)
        self.buffer_grid.SetColLabelValue(12, "B")
        self.buffer_grid.SetColSize(12, 26)
        self.buffer_grid.SetColLabelValue(13, "C")
        self.buffer_grid.SetColSize(13, 26)
        self.buffer_grid.SetColLabelValue(14, "D")
        self.buffer_grid.SetColSize(14, 26)
        self.buffer_grid.SetColLabelValue(15, "E")
        self.buffer_grid.SetColSize(15, 26)
        self.buffer_grid.SetColLabelValue(16, "F")
        self.buffer_grid.SetColSize(16, 26)
        self.buffer_grid.SetColLabelValue(17, "ASCII")
        self.buffer_grid.SetColSize(17, 166)
        self.buffer_grid.SetMinSize((661, -1))
        self.buffer_grid.HideRowLabels()
        self.buffer_grid.ShowScrollbars(wx.SHOW_SB_NEVER, wx.SHOW_SB_DEFAULT)
        self.buffer_grid.SetMaxSize((661, -1))
        buffer_sizer.Add(self.buffer_grid, 1, wx.EXPAND, 0)

        buffer_sizer.Add((20, 0), 0, 0, 0)

        self.debug_text_ctrl = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.debug_text_ctrl.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        buffer_sizer.Add(self.debug_text_ctrl, 1, wx.EXPAND, 0)

        sizer_2.Add((0, 20), 0, 0, 0)

        options_sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Program Options"), wx.VERTICAL)
        sizer_2.Add(options_sizer, 0, wx.EXPAND, 0)

        checkbox_sizer = wx.BoxSizer(wx.HORIZONTAL)
        options_sizer.Add(checkbox_sizer, 0, wx.EXPAND, 0)

        self.verify_checkbox_copy = wx.CheckBox(self, wx.ID_ANY, "Verify")
        self.verify_checkbox_copy.SetValue(1)
        checkbox_sizer.Add(self.verify_checkbox_copy, 0, wx.ALL | wx.EXPAND, 4)

        self.blank_check_checkbox_copy = wx.CheckBox(self, wx.ID_ANY, "Blank Check")
        self.blank_check_checkbox_copy.SetValue(1)
        checkbox_sizer.Add(self.blank_check_checkbox_copy, 0, wx.ALL | wx.EXPAND, 4)

        vcc_sizer = wx.BoxSizer(wx.HORIZONTAL)
        options_sizer.Add(vcc_sizer, 0, wx.EXPAND, 0)

        vcc_label = wx.StaticText(self, wx.ID_ANY, "Verify/Blank Check voltage:", style=wx.ALIGN_CENTER_HORIZONTAL)
        vcc_sizer.Add(vcc_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.vcc_radio_btn = wx.RadioButton(self, wx.ID_ANY, "VCC")
        vcc_sizer.Add(self.vcc_radio_btn, 0, wx.ALL, 4)

        self.vcc_5_radio_btn = wx.RadioButton(self, wx.ID_ANY, "VCC +/-5%")
        vcc_sizer.Add(self.vcc_5_radio_btn, 0, wx.ALL, 4)

        self.vcc_10_radio_btn = wx.RadioButton(self, wx.ID_ANY, "VCC +/-10%")
        vcc_sizer.Add(self.vcc_10_radio_btn, 0, wx.ALL, 4)

        sizer_2.Add((0, 10), 0, 0, 0)

        sizer_1.Add((10, 0), 0, 0, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()
        self.Bind(EVT_SERIALRX, self.OnSerialRx)

        self.debug_text_ctrl.Bind(wx.EVT_CHAR_HOOK, self.OnDebugText)
        self.Bind(wx.EVT_CLOSE, self.OnExit)
        # end wxGlade

        self.SetMinSize(self.Size)

        self.thread = None
        self.serial = None

        self.txQueue = queue.Queue()

    def OnOpen(self, event):  # wxGlade: MainFrame.<event_handler>
        with wx.FileDialog(self, "Open file", wildcard="All files (*.*)|*.*",
                        style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:

            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return

            pathname = fileDialog.GetPath()
            try:
                with open(pathname, 'rb') as file:
                    self.upload(file)
            except IOError:
                wx.LogError("Cannot open file '%s'." % newfile)

    def OnSave(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnSave' not implemented!")
        event.Skip()

    def OnExit(self, event):  # wxGlade: MainFrame.<event_handler>
        self.StopTxThread()
        self.StopRxThread()
        if self.serial is not None:
            self.serial.close()
        self.Destroy()

    def addAlternatives(self, dlg, alternatives):
        for alternative in alternatives:
            dlg.OnAddRow(alternative)

    def OnDeviceSelect(self, event):  # wxGlade: MainFrame.<event_handler>
        with SelectDeviceDialog(self) as dlg:
            processor.execute_commands([ListDevices()], self.txQueue, lambda result: self.addAlternatives(dlg, result[0]))
            result = dlg.ShowModal()
            if result == wx.ID_OK:
                device_id, device_name = dlg.GetSelectedDevice().split(')', 1)
                self.txQueue.put("t" + device_id + "\n")
                self.selected_device.SetLabel(re.sub(' +', ' ', device_name))

    def OnDeviceRead(self, event):  # wxGlade: MainFrame.<event_handler>
        processor.execute_commands([ReadDevice(), DownloadData()], self.txQueue, lambda result: print(result[1]))

    def OnDeviceBlankCheck(self, event):  # wxGlade: MainFrame.<event_handler>
        self.txQueue.put('B\n')

    def OnDeviceVerify(self, event):  # wxGlade: MainFrame.<event_handler>
        self.txQueue.put('C\n')

    def OnDeviceProgram(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnDeviceProgram' not implemented!")
        event.Skip()

    def OnDebugText(self, event):  # wxGlade: MainFrame.<event_handler>
        code = event.GetKeyCode()
        if code == 13:
            self.txQueue.put('\n')
        else:
            char = chr(code)
            self.txQueue.put(char)
        event.StopPropagation()

    def OnSerialRx(self, event):  # wxGlade: MainFrame.<event_handler>
        if event.data == b'\x08':
            (_, xpos, _) = self.debug_text_ctrl.PositionToXY(self.debug_text_ctrl.GetInsertionPoint())
            if xpos > 0:
                self.debug_text_ctrl.Remove(self.debug_text_ctrl.GetLastPosition() - 1, self.debug_text_ctrl.GetLastPosition())
            processor.remove_last_character()
            return
        char = event.data.decode('UTF-8', 'replace')
        self.debug_text_ctrl.AppendText(char)
        processor.append_character(char)

    def print_record(self, type, data, address):
        if data is None:
            data = bytearray()
        record_length = len(data) + 3; # 2 bytes for address, 1 for checksum
        chksum = ~ ( sum(data) + record_length + ( address & 0xFF ) + ( address >> 8 ) ) & 0xFF
        data_str = data.hex().upper()
        self.txQueue.put(f"{type}{record_length:02X}{address:04X}{data_str}{chksum:02X}\n")

    def upload(self, file):
        count = 0
        header = bytes('HDR', 'iso-8859-1')
        self.print_record("S0", header, 0)

        data = file.read(32)
        while data:
            self.print_record("S1", data, 32*count)
            count += 1
            data = file.read(32)

        self.print_record("S5", None, count)
        self.print_record("S9", None, 0)

    def ComPortTxThread(self):
        while True:
            try:
                item = self.txQueue.get()
                self.serial.write(item.encode('UTF-8', 'replace'))
                self.txQueue.task_done()
            except queue.ShutDown:
                break

    def StartTxThread(self):
        self.txThread = threading.Thread(target=self.ComPortTxThread, daemon = True)
        self.txThread.start()

    def StopTxThread(self):
        self.txQueue.shutdown()
        self.txThread.join()

    def ComPortRxThread(self):
        while self.alive.is_set():
            b = self.serial.read(self.serial.in_waiting or 1)
            if b:
                b = b.replace(b'\r', b'')
                wx.PostEvent(self, SerialRxEvent(data=b))

    def StartRxThread(self):
        self.thread = threading.Thread(target=self.ComPortRxThread, daemon = True)
        self.alive.set()
        self.thread.start()

    def StopRxThread(self):
        if self.thread is not None:
            self.alive.clear()
            self.thread.join()
            self.thread = None

    def StartSerial(self):
        try:
            programmer = find_programmer()
            com_port = get_com_port(programmer)
            self.serial = serial.Serial(com_port, 38400, timeout=1)
            self.alive = threading.Event()
            self.StartRxThread()
            self.StartTxThread()
        except DeviceError as de:
            with ErrorFrame(self, -1, "", error_message=str(de)) as dialog:
                dialog.CenterOnParent()
                dialog.ShowModal()
            self.OnExit(None)

# end of class MainFrame

class EpromProgrammerApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        self.frame.StartSerial()
        self.frame.txQueue.put('\b' * 80)
        return True

# end of class EpromProgrammerApp

if __name__ == "__main__":
    app = EpromProgrammerApp(0)
    app.MainLoop()
